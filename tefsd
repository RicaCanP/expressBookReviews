openapi: 3.0.0
info:
  title: backend-ks-api-portal
  version: 1.0.0
  description: API for api-portal project
security:
  - bearer: []
servers:
  - url: /api/v1
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      in: Header
      name: Authorization
  parameters:
    id:
      in: path
      name: id
      required: true
      description: Numeric ID of the resource
      schema:
        type: integer
    productId:
      in: path
      name: productId
      required: true
      description: Numeric ID of the product
      schema:
        type: integer
    projectId:
      in: path
      name: projectId
      required: true
      description: Numeric ID of the project
      schema:
        type: integer
    teamId:
      in: path
      name: teamId
      required: true
      description: Numeric ID of the team
      schema:
        type: integer
    limit:
      in: query
      name: limit
      required: false
      description: Number of items to return.
      schema:
        type: integer
        minimum: 1
        default: 99
    offset:
      in: query
      name: offset
      required: false
      description: Number of items to skip before starting to collect the result set.
      schema:
        type: integer
        minimum: 0
        default: 0
    order:
      in: query
      name: order
      required: false
      description: >-
        Defines the order of the result set by a defined property, first value
        can be any table property, second value must be 'ASC' or 'DESC'.
      schema:
        type: string
        pattern: ^[(["w+","(DESC|ASC)"](,|]$))+$
      examples:
        orderNone:
          summary: None
          value: ''
        orderByIdDesc:
          summary: Order in 'DESC' order
          value: '[[''A'',''DESC'']]'
        orderByIdASC:
          summary: Order in 'ASC' order
          value: '[[''A'',''ASC'']]'
        multipleOrder:
          summary: Order by multiple parameters
          value: '[[''A'',''DESC''],[''B'',''ASC'']]'
          description: >-
            Order of importance is determined from left to right in the query
            string, in this example result gets ordered first by "A" in "DESC"
            then by "B" in "ASC" order.
    where:
      in: query
      name: where
      required: false
      description: Query parameters for filtering results.
      schema:
        type: object
        properties:
          type:
            type: string
            example: image
    attributes:
      in: query
      name: attributes
      required: false
      description: Comma-separated list of attributes to include in the response.
      schema:
        type: string
        example: attribute1,attribute2
    include:
      in: query
      name: include
      required: false
      description: Comma-separated list of associations to include in the response.
      schema:
        type: string
        example: association1,association2
  responses:
    Ok:
      description: Ok
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: Ok
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: Bad Request
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: Unauthorized
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: Not found
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: Internal Server Error
    Forbidden:
      description: Forbidden Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: Forbidden Error
  models:
    Api:
      schema:
        type: object
        properties:
          id:
            type: integer
            description: The Api ID.
          name:
            type: string
            description: Name of the Api.
          description:
            type: string
            description: Description of the Api.
          status:
            type: string
            enum:
              - draft
              - registered
          productId:
            type: integer
            description: Parent Product ID.
      examples:
        single:
          name: Sample Api
          description: This is a sample api.
          status: draft
          createdAt: '2023-10-11T20:42:11.424Z'
          updatedAt: '2023-10-11T20:42:11.424Z'
          openedAt: '2023-10-11T20:42:11.424Z'
      responses:
        single:
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The Api ID.
                  name:
                    type: string
                    description: Name of the Api.
                  description:
                    type: string
                    description: Description of the Api.
                  status:
                    type: string
                    enum:
                      - draft
                      - registered
                  productId:
                    type: integer
                    description: Parent Product ID.
              example:
                name: Sample Api
                description: This is a sample api.
                status: draft
                createdAt: '2023-10-11T20:42:11.424Z'
                updatedAt: '2023-10-11T20:42:11.424Z'
                openedAt: '2023-10-11T20:42:11.424Z'
        list:
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  properties:
                    message:
                      type: string
                      description: Response message.
                    count:
                      type: integer
                      description: Total resources count.
                    limit:
                      type: integer
                      description: Limit on the number of resources retrieved.
                    offset:
                      type: integer
                      description: Offset for the resources retrieved.
                  example:
                    message: Ok
                    count: 1
                    limit: 99
                    offset: 0
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The Api ID.
                        name:
                          type: string
                          description: Name of the Api.
                        description:
                          type: string
                          description: Description of the Api.
                        status:
                          type: string
                          enum:
                            - draft
                            - registered
                        productId:
                          type: integer
                          description: Parent Product ID.
              example:
                message: Ok
                count: 1
                limit: 99
                offset: 0
                data:
                  name: Sample Api
                  description: This is a sample api.
                  status: draft
                  createdAt: '2023-10-11T20:42:11.424Z'
                  updatedAt: '2023-10-11T20:42:11.424Z'
                  openedAt: '2023-10-11T20:42:11.424Z'
    Product:
      schema:
        type: object
        properties:
          id:
            type: integer
            description: The Product ID.
          name:
            type: string
            description: Name of the Product.
          description:
            type: string
            description: Description of the Product.
          status:
            type: string
            enum:
              - draft
              - registered
          projectId:
            type: integer
            description: Parent Project ID.
      examples:
        single:
          name: Sample Product
          description: This is a sample product.
          status: draft
          createdAt: '2023-10-11T20:42:11.424Z'
          updatedAt: '2023-10-11T20:42:11.424Z'
          openedAt: '2023-10-11T20:42:11.424Z'
      responses:
        single:
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The Product ID.
                  name:
                    type: string
                    description: Name of the Product.
                  description:
                    type: string
                    description: Description of the Product.
                  status:
                    type: string
                    enum:
                      - draft
                      - registered
                  projectId:
                    type: integer
                    description: Parent Project ID.
              example:
                name: Sample Product
                description: This is a sample product.
                status: draft
                createdAt: '2023-10-11T20:42:11.424Z'
                updatedAt: '2023-10-11T20:42:11.424Z'
                openedAt: '2023-10-11T20:42:11.424Z'
        list:
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  properties:
                    message:
                      type: string
                      description: Response message.
                    count:
                      type: integer
                      description: Total resources count.
                    limit:
                      type: integer
                      description: Limit on the number of resources retrieved.
                    offset:
                      type: integer
                      description: Offset for the resources retrieved.
                  example:
                    message: Ok
                    count: 1
                    limit: 99
                    offset: 0
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The Product ID.
                        name:
                          type: string
                          description: Name of the Product.
                        description:
                          type: string
                          description: Description of the Product.
                        status:
                          type: string
                          enum:
                            - draft
                            - registered
                        projectId:
                          type: integer
                          description: Parent Project ID.
              example:
                message: Ok
                count: 1
                limit: 99
                offset: 0
                data:
                  name: Sample Product
                  description: This is a sample product.
                  status: draft
                  createdAt: '2023-10-11T20:42:11.424Z'
                  updatedAt: '2023-10-11T20:42:11.424Z'
                  openedAt: '2023-10-11T20:42:11.424Z'
    Project:
      schema:
        type: object
        properties:
          id:
            type: integer
            description: The Project ID.
          name:
            type: string
            description: Name of the Project.
          description:
            type: string
            description: Description of the Project.
          justification:
            type: string
            description: Justification of the Project.
          businessSponsorEmail:
            type: string
            format: email
            description: Email of the business sponsor
          operationsEmail:
            type: string
            format: email
            description: Email of the operations team
          projectManagerEmail:
            type: string
            format: email
            description: Email of the project manager
          sitDate:
            type: string
            format: date
            description: Date of System Integration Testing
          uatDate:
            type: string
            format: date
            description: Date of User Aceptance Testing
          prodDate:
            type: string
            format: date
            description: Date of Production Release
          status:
            type: string
            enum:
              - draft
              - registered
          teamId:
            type: integer
            description: Parent Team ID.
      examples:
        single:
          name: Sample Project
          description: This is a sample project.
          justification: Justification of the project
          businessSponsorEmail: example@example.com
          operationsEmail: example@example.com
          projectManagerEmail: example@example.com
          sitDate: '2023-11-19T06:00:00.000Z'
          uatDate: '2023-11-19T06:00:00.000Z'
          prodDate: '2023-11-19T06:00:00.000Z'
          status: draft
          createdAt: '2023-10-11T20:42:11.424Z'
          updatedAt: '2023-10-11T20:42:11.424Z'
          openedAt: '2023-10-11T20:42:11.424Z'
      responses:
        single:
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The Project ID.
                  name:
                    type: string
                    description: Name of the Project.
                  description:
                    type: string
                    description: Description of the Project.
                  justification:
                    type: string
                    description: Justification of the Project.
                  businessSponsorEmail:
                    type: string
                    format: email
                    description: Email of the business sponsor
                  operationsEmail:
                    type: string
                    format: email
                    description: Email of the operations team
                  projectManagerEmail:
                    type: string
                    format: email
                    description: Email of the project manager
                  sitDate:
                    type: string
                    format: date
                    description: Date of System Integration Testing
                  uatDate:
                    type: string
                    format: date
                    description: Date of User Aceptance Testing
                  prodDate:
                    type: string
                    format: date
                    description: Date of Production Release
                  status:
                    type: string
                    enum:
                      - draft
                      - registered
                  teamId:
                    type: integer
                    description: Parent Team ID.
              example:
                name: Sample Project
                description: This is a sample project.
                justification: Justification of the project
                businessSponsorEmail: example@example.com
                operationsEmail: example@example.com
                projectManagerEmail: example@example.com
                sitDate: '2023-11-19T06:00:00.000Z'
                uatDate: '2023-11-19T06:00:00.000Z'
                prodDate: '2023-11-19T06:00:00.000Z'
                status: draft
                createdAt: '2023-10-11T20:42:11.424Z'
                updatedAt: '2023-10-11T20:42:11.424Z'
                openedAt: '2023-10-11T20:42:11.424Z'
        list:
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  properties:
                    message:
                      type: string
                      description: Response message.
                    count:
                      type: integer
                      description: Total resources count.
                    limit:
                      type: integer
                      description: Limit on the number of resources retrieved.
                    offset:
                      type: integer
                      description: Offset for the resources retrieved.
                  example:
                    message: Ok
                    count: 1
                    limit: 99
                    offset: 0
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The Project ID.
                        name:
                          type: string
                          description: Name of the Project.
                        description:
                          type: string
                          description: Description of the Project.
                        justification:
                          type: string
                          description: Justification of the Project.
                        businessSponsorEmail:
                          type: string
                          format: email
                          description: Email of the business sponsor
                        operationsEmail:
                          type: string
                          format: email
                          description: Email of the operations team
                        projectManagerEmail:
                          type: string
                          format: email
                          description: Email of the project manager
                        sitDate:
                          type: string
                          format: date
                          description: Date of System Integration Testing
                        uatDate:
                          type: string
                          format: date
                          description: Date of User Aceptance Testing
                        prodDate:
                          type: string
                          format: date
                          description: Date of Production Release
                        status:
                          type: string
                          enum:
                            - draft
                            - registered
                        teamId:
                          type: integer
                          description: Parent Team ID.
              example:
                message: Ok
                count: 1
                limit: 99
                offset: 0
                data:
                  name: Sample Project
                  description: This is a sample project.
                  justification: Justification of the project
                  businessSponsorEmail: example@example.com
                  operationsEmail: example@example.com
                  projectManagerEmail: example@example.com
                  sitDate: '2023-11-19T06:00:00.000Z'
                  uatDate: '2023-11-19T06:00:00.000Z'
                  prodDate: '2023-11-19T06:00:00.000Z'
                  status: draft
                  createdAt: '2023-10-11T20:42:11.424Z'
                  updatedAt: '2023-10-11T20:42:11.424Z'
                  openedAt: '2023-10-11T20:42:11.424Z'
    Team:
      schema:
        create:
          type: object
          properties:
            name:
              type: string
              description: Name of the Team.
            members:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    description: The Member User ID.
                  teamRole:
                    type: string
                    enum:
                      - teamOwner
                      - productManager
                      - internalDeveloper
        removeMember:
          type: object
          properties:
            members:
              type: array
              items:
                type: number
                description: Ids of the members to remove
      examples:
        create:
          name: Sample Team
          members:
            - id: 1
              teamRole: teamOwner
            - id: 2
              teamRole: productManager
            - id: 3
              teamRole: internalDeveloper
        removeMember:
          members:
            - 1
            - 2
            - 3
      responses:
        single:
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The Team ID.
                  name:
                    type: string
                    description: Name of the Team.
                  members:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The Member User ID.
                        name:
                          type: string
                          description: Name of the Member.
                        email:
                          type: string
                          description: Email of the Member.
                        teamRole:
                          type: string
                          enum:
                            - teamOwner
                            - productManager
                            - internalDeveloper
              example:
                name: Sample Team
                members:
                  - id: 1
                    name: User 1
                    email: example@example.com
                    teamRole: teamOwner
                  - id: 2
                    name: User 2
                    email: example@example.com
                    teamRole: productManager
                  - id: 3
                    name: User 3
                    email: example@example.com
                    teamRole: internalDeveloper
                createdAt: '2023-10-11T20:42:11.424Z'
                updatedAt: '2023-10-11T20:42:11.424Z'
                openedAt: '2023-10-11T20:42:11.424Z'
        list:
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  properties:
                    message:
                      type: string
                      description: Response message.
                    count:
                      type: integer
                      description: Total resources count.
                    limit:
                      type: integer
                      description: Limit on the number of resources retrieved.
                    offset:
                      type: integer
                      description: Offset for the resources retrieved.
                  example:
                    message: Ok
                    count: 1
                    limit: 99
                    offset: 0
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The Team ID.
                        name:
                          type: string
                          description: Name of the Team.
                        members:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                description: The Member User ID.
                              name:
                                type: string
                                description: Name of the Member.
                              email:
                                type: string
                                description: Email of the Member.
                              teamRole:
                                type: string
                                enum:
                                  - teamOwner
                                  - productManager
                                  - internalDeveloper
              example:
                message: Ok
                count: 1
                limit: 99
                offset: 0
                data:
                  name: Sample Team
                  members:
                    - id: 1
                      name: User 1
                      email: example@example.com
                      teamRole: teamOwner
                    - id: 2
                      name: User 2
                      email: example@example.com
                      teamRole: productManager
                    - id: 3
                      name: User 3
                      email: example@example.com
                      teamRole: internalDeveloper
                  createdAt: '2023-10-11T20:42:11.424Z'
                  updatedAt: '2023-10-11T20:42:11.424Z'
                  openedAt: '2023-10-11T20:42:11.424Z'
    User:
      schema:
        type: object
        properties:
          id:
            type: integer
            description: The User ID.
          name:
            type: string
            description: Name of the User.
          email:
            type: string
            description: Email of the User.
          password:
            type: string
            description: Password of the User.
          role:
            type: string
            enum:
              - user
              - admin
            description: Role of the User.
          authType:
            type: string
            enum:
              - Email
              - Microsoft
            description: Authentication type of the User.
          azureId:
            type: string
            description: Azure ID of the User.
          createdAt:
            type: string
            format: date-time
            description: Creation date and time.
          updatedAt:
            type: string
            format: date-time
            description: Last update date and time.
      examples:
        single:
          name: John Doe
          email: john.doe@example.com
          password: securepassword
          role: user
          authType: Email
          azureId: '123456789'
          createdAt: '2023-10-11T20:42:11.424Z'
          updatedAt: '2023-10-11T20:42:11.424Z'
          openedAt: '2023-10-11T20:42:11.424Z'
      responses:
        single:
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The User ID.
                  name:
                    type: string
                    description: Name of the User.
                  email:
                    type: string
                    description: Email of the User.
                  password:
                    type: string
                    description: Password of the User.
                  role:
                    type: string
                    enum:
                      - user
                      - admin
                    description: Role of the User.
                  authType:
                    type: string
                    enum:
                      - Email
                      - Microsoft
                    description: Authentication type of the User.
                  azureId:
                    type: string
                    description: Azure ID of the User.
                  createdAt:
                    type: string
                    format: date-time
                    description: Creation date and time.
                  updatedAt:
                    type: string
                    format: date-time
                    description: Last update date and time.
              example:
                name: John Doe
                email: john.doe@example.com
                password: securepassword
                role: user
                authType: Email
                azureId: '123456789'
                createdAt: '2023-10-11T20:42:11.424Z'
                updatedAt: '2023-10-11T20:42:11.424Z'
                openedAt: '2023-10-11T20:42:11.424Z'
        list:
          description: Data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  properties:
                    message:
                      type: string
                      description: Response message.
                    count:
                      type: integer
                      description: Total resources count.
                    limit:
                      type: integer
                      description: Limit on the number of resources retrieved.
                    offset:
                      type: integer
                      description: Offset for the resources retrieved.
                  example:
                    message: Ok
                    count: 1
                    limit: 99
                    offset: 0
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The User ID.
                        name:
                          type: string
                          description: Name of the User.
                        email:
                          type: string
                          description: Email of the User.
                        password:
                          type: string
                          description: Password of the User.
                        role:
                          type: string
                          enum:
                            - user
                            - admin
                          description: Role of the User.
                        authType:
                          type: string
                          enum:
                            - Email
                            - Microsoft
                          description: Authentication type of the User.
                        azureId:
                          type: string
                          description: Azure ID of the User.
                        createdAt:
                          type: string
                          format: date-time
                          description: Creation date and time.
                        updatedAt:
                          type: string
                          format: date-time
                          description: Last update date and time.
              example:
                message: Ok
                count: 1
                limit: 99
                offset: 0
                data:
                  name: John Doe
                  email: john.doe@example.com
                  password: securepassword
                  role: user
                  authType: Email
                  azureId: '123456789'
                  createdAt: '2023-10-11T20:42:11.424Z'
                  updatedAt: '2023-10-11T20:42:11.424Z'
                  openedAt: '2023-10-11T20:42:11.424Z'
  schemas:
    Api:
      type: object
      properties:
        id:
          type: integer
          description: The Api ID.
        name:
          type: string
          description: Name of the Api.
        description:
          type: string
          description: Description of the Api.
        status:
          type: string
          enum:
            - draft
            - registered
        productId:
          type: integer
          description: Parent Product ID.
    Product:
      type: object
      properties:
        id:
          type: integer
          description: The Product ID.
        name:
          type: string
          description: Name of the Product.
        description:
          type: string
          description: Description of the Product.
        status:
          type: string
          enum:
            - draft
            - registered
        projectId:
          type: integer
          description: Parent Project ID.
    Project:
      type: object
      properties:
        id:
          type: integer
          description: The Project ID.
        name:
          type: string
          description: Name of the Project.
        description:
          type: string
          description: Description of the Project.
        justification:
          type: string
          description: Justification of the Project.
        businessSponsorEmail:
          type: string
          format: email
          description: Email of the business sponsor
        operationsEmail:
          type: string
          format: email
          description: Email of the operations team
        projectManagerEmail:
          type: string
          format: email
          description: Email of the project manager
        sitDate:
          type: string
          format: date
          description: Date of System Integration Testing
        uatDate:
          type: string
          format: date
          description: Date of User Aceptance Testing
        prodDate:
          type: string
          format: date
          description: Date of Production Release
        status:
          type: string
          enum:
            - draft
            - registered
        teamId:
          type: integer
          description: Parent Team ID.
    Team:
      type: object
      properties:
        id:
          type: integer
          description: The Team ID.
        name:
          type: string
          description: Name of the Team.
        members:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: The Member User ID.
              name:
                type: string
                description: Name of the Member.
              email:
                type: string
                description: Email of the Member.
              teamRole:
                type: string
                enum:
                  - teamOwner
                  - productManager
                  - internalDeveloper
    User:
      type: object
      properties:
        id:
          type: integer
          description: The User ID.
        name:
          type: string
          description: Name of the User.
        email:
          type: string
          description: Email of the User.
        password:
          type: string
          description: Password of the User.
        role:
          type: string
          enum:
            - user
            - admin
          description: Role of the User.
        authType:
          type: string
          enum:
            - Email
            - Microsoft
          description: Authentication type of the User.
        azureId:
          type: string
          description: Azure ID of the User.
        createdAt:
          type: string
          format: date-time
          description: Creation date and time.
        updatedAt:
          type: string
          format: date-time
          description: Last update date and time.
    NewFile:
      type: object
      properties:
        type:
          type: string
          minLength: 1
          maxLength: 255
          example: image
        fileName:
          type: string
          minLength: 1
          maxLength: 255
          example: image.png
  requestBodies:
    NewFile:
      required: true
      description: File data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewFile'
paths:
  /api:
    get:
      summary: Retrieve all apis
      tags:
        - Api
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ok
                  count:
                    type: integer
                    example: 2
                  limit:
                    type: integer
                    example: 99
                  offset:
                    type: integer
                    example: 0
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 2
                        name:
                          type: string
                          example: Test Api 2
                        description:
                          type: string
                          example: Test description
                        status:
                          type: string
                          example: draft
                        products:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              name:
                                type: string
                                example: Test Api
                              status:
                                type: string
                                example: draft
                        createdAt:
                          type: string
                          format: date-time
                          example: '2023-01-01T12:00:00Z'
                        updatedAt:
                          type: string
                          format: date-time
                          example: '2023-01-01T12:30:00Z'
                        openedAt:
                          type: string
                          format: date-time
                          example: '2023-01-01T12:15:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/{id}:
    get:
      summary: Retrieve an individual api by id
      tags:
        - Api
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/models/Api/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Partially modify an api by id
      tags:
        - Api
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/models/Api/schema'
              example:
                $ref: '#/components/models/Api/examples/single'
      responses:
        '200':
          $ref: '#/components/models/Api/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete an api by id
      tags:
        - Api
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 255
                  description: The user email.
                password:
                  type: string
                  minLength: 8
                  maxLength: 255
                  description: The user password.
            example:
              email: example@mail.com
              password: password1234
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      expires:
                        type: number
                      refresh_token:
                        type: object
                        properties:
                          token:
                            type: string
                          expires:
                            type: number
                          expires_in:
                            type: number
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                            nullable: true
                          email:
                            type: string
                          role:
                            type: string
                      profile:
                        type: object
                        properties:
                          id:
                            type: integer
                          time_zone:
                            type: string
                          locale:
                            type: string
                          userId:
                            type: integer
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
              example:
                message: Ok
                data:
                  token: eyJhbGciOi...
                  expires: 1700081945.998
                  refresh_token:
                    token: eyJhbGciOi...
                    expires: 1713301146
                    expires_in: 15811199.999000072
                  user:
                    id: 2
                    name: null
                    email: encodari2@gmail.com
                    role: user
                  profile:
                    id: 2
                    time_zone: America/Mexico_City
                    locale: es
                    userId: 2
                    createdAt: '2023-10-11T20:43:15.506Z'
                    updatedAt: '2023-10-11T20:43:15.506Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/logout:
    post:
      summary: Log out a user
      tags:
        - Authentication
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: Ok
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              example:
                message: Bad request
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/exchange:
    post:
      summary: SSO login
      description: Exchange SSO token to API token
      tags:
        - Authentication
      security: []
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      expires:
                        type: number
                      refresh_token:
                        type: object
                        properties:
                          token:
                            type: string
                          expires:
                            type: number
                          expires_in:
                            type: number
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                            nullable: true
                          email:
                            type: string
                          role:
                            type: string
                      profile:
                        type: object
                        properties:
                          id:
                            type: integer
                          time_zone:
                            type: string
                          locale:
                            type: string
                          userId:
                            type: integer
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
              example:
                message: Ok
                data:
                  token: eyJhbGciOi...
                  expires: 1700081945.998
                  refresh_token:
                    token: eyJhbGciOi...
                    expires: 1713301146
                    expires_in: 15811199.999000072
                  user:
                    id: 2
                    name: null
                    email: encodari2@gmail.com
                    role: user
                  profile:
                    id: 2
                    time_zone: America/Mexico_City
                    locale: es
                    userId: 2
                    createdAt: '2023-10-11T20:43:15.506Z'
                    updatedAt: '2023-10-11T20:43:15.506Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user.
                  maxLength: 255
                  required: true
                password:
                  type: string
                  description: The password of the user.
                  minLength: 8
                  maxLength: 255
                  required: true
                locale:
                  type: string
                  enum:
                    - en
                    - es
                  description: Locale preference of the user.
                timezone:
                  type: string
                  maxLength: 255
                  description: Timezone preference of the user.
            example:
              email: sample@email.com
              password: password1234
              locale: en
              timezone: America/Mexico_City
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      expires:
                        type: number
                      refresh_token:
                        type: object
                        properties:
                          token:
                            type: string
                          expires:
                            type: number
                          expires_in:
                            type: number
                      user:
                        type: object
                        properties:
                          id:
                            type: number
                          name:
                            type: string
                            nullable: true
                          email:
                            type: string
                          role:
                            type: string
                      profile:
                        type: object
                        properties:
                          id:
                            type: number
                          time_zone:
                            type: string
                          locale:
                            type: string
                          userId:
                            type: number
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
              example:
                message: Ok
                data:
                  token: ...token....
                  expires: 1700082987.42
                  refresh_token:
                    token: ...refresh-token-here...
                    expires: 1713302187.423
                    expires_in: 15811200
                  user:
                    id: 4
                    name: null
                    email: encodari23@gmail.com
                    role: user
                  profile:
                    id: 3
                    time_zone: America/Mexico_City
                    locale: es
                    userId: 4
                    createdAt: '2023-10-16T21:16:27.379Z'
                    updatedAt: '2023-10-16T21:16:27.379Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/reset:
    get:
      summary: Handle password reset token validation and redirection
      tags:
        - Authentication
      security: []
      parameters:
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: The JWT token for password reset validation.
      responses:
        '302':
          description: Redirects to the recovery URL with a valid token
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Handle password reset or reset request based on provided parameters
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  maxLength: 255
                  description: The JWT token for password reset validation.
                email:
                  type: string
                  format: email
                  maxLength: 255
                  description: Email to request password reset.
                password:
                  type: string
                  minLength: 8
                  maxLength: 255
                  description: New password to set after validation of reset token.
      responses:
        '200':
          description: Successful operation (either password reset or reset email sent)
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/change:
    post:
      summary: Change password for the authenticated user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - oldPass
                - newPass
              properties:
                email:
                  type: string
                  format: email
                  maxLength: 255
                  description: The email address of the user.
                oldPass:
                  type: string
                  minLength: 8
                  maxLength: 255
                  description: The old password of the user.
                newPass:
                  type: string
                  minLength: 8
                  maxLength: 255
                  description: The new password to set for the user.
      responses:
        '200':
          description: Successful password change
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      expires:
                        type: number
                      refresh_token:
                        type: object
                        properties:
                          token:
                            type: string
                          expires:
                            type: number
                          expires_in:
                            type: number
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                          email:
                            type: string
                            format: email
                          role:
                            type: string
                      profile:
                        type: object
                        properties:
                          id:
                            type: integer
                          time_zone:
                            type: string
                          locale:
                            type: string
                          userId:
                            type: integer
                          createdAt:
                            type: string
                            format: date-time
                          updatedAt:
                            type: string
                            format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/refresh:
    post:
      summary: Refresh the JWT for the authenticated user
      tags:
        - Authentication
      responses:
        '200':
          description: Successful token refresh
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        description: The refreshed access token
                      expires:
                        type: number
                        description: Expiry timestamp of the access token
                      refresh_token:
                        type: object
                        properties:
                          token:
                            type: string
                            description: The refreshed refresh token
                          expires:
                            type: number
                            description: Expiry timestamp of the refresh token
                          expires_in:
                            type: number
                            description: Expiry duration in seconds
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                          email:
                            type: string
                            format: email
                          role:
                            type: string
                            enum:
                              - user
                              - admin
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /file:
    get:
      tags:
        - File
      summary: Get all file entries
      operationId: GetAllFiles
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/include'
        - $ref: '#/components/parameters/where'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/models/Api/schema'
                  - type: object
                    properties:
                      count:
                        type: number
                        example: 1
                      limit:
                        type: number
                        example: 99
                      offset:
                        type: number
                        example: 0
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/NewFile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - File
      summary: Prepare a file for upload
      description: >
        File upload is a 2 step process:

        1. Post here to create the db representation of the file, you will get
        the upload url in the response.

        2. Upload the file to that url (uploadUrl).
      operationId: CreateFile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/models/Api/schema'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/NewFile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        $ref: '#/components/requestBodies/NewFile'
  /file/{id}:
    get:
      tags:
        - File
      summary: Get a file entry by id
      operationId: FindFileById
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/include'
        - $ref: '#/components/parameters/attributes'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/models/Api/schema'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/NewFile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - File
      summary: Edit a file entry by id
      operationId: EditFileById
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/models/Api/schema'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/NewFile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      requestBody:
        $ref: '#/components/requestBodies/NewFile'
    delete:
      tags:
        - File
      summary: Delete a file entry by id
      operationId: DeleteFileById
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /microsoftauth/login:
    get:
      tags:
        - Microsoft Auth
      summary: Microsoft Auth
      description: Return to redirect microsoft web login.
      operationId: MicrosoftLogin
      responses:
        '302':
          description: >-
            The request has succeeded and the user will redirect to microsoft
            login.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/models/Project/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /microsoftauth/login/callback:
    get:
      tags:
        - Microsoft Auth
      summary: Microsoft callback
      description: Return the redirect to home page with user token.
      operationId: MicrosoftCallback
      responses:
        '201':
          description: The request has succeeded and the user will redirect to home login.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/models/Project/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /product:
    get:
      summary: Retrieve all products
      tags:
        - Product
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ok
                  count:
                    type: integer
                    example: 2
                  limit:
                    type: integer
                    example: 99
                  offset:
                    type: integer
                    example: 0
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 2
                        name:
                          type: string
                          example: Test Project 01
                        description:
                          type: string
                          example: Test description
                        status:
                          type: string
                          example: draft
                        apis:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              name:
                                type: string
                                example: Test Api
                              status:
                                type: string
                                example: draft
                        projects:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              name:
                                type: string
                                example: Test Product
                              status:
                                type: string
                                example: draft
                              teams:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 1
                                    name:
                                      type: string
                                      example: Test team
                    createdAt:
                      type: string
                      format: date-time
                      example: '2023-01-01T12:00:00Z'
                    updatedAt:
                      type: string
                      format: date-time
                      example: '2023-01-01T12:30:00Z'
                    openedAt:
                      type: string
                      format: date-time
                      example: '2023-01-01T12:15:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /product/{id}:
    get:
      summary: Retrieve an individual product by id
      tags:
        - Product
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/models/Product/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Partially modify a product by id
      tags:
        - Product
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/models/Product/schema'
              example:
                $ref: '#/components/models/Product/examples/single'
      responses:
        '200':
          $ref: '#/components/models/Product/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a product by id
      tags:
        - Product
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /product/{productId}/api:
    get:
      summary: Retrieve all apis from a product
      tags:
        - Api
      parameters:
        - $ref: '#/components/parameters/productId'
      responses:
        '200':
          $ref: '#/components/models/Api/responses/list'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create an api linked to a product
      tags:
        - Api
      parameters:
        - $ref: '#/components/parameters/productId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/models/Api/schema'
              example:
                $ref: '#/components/models/Api/examples/single'
      responses:
        '200':
          $ref: '#/components/models/Api/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /product/{productId}/api/{id}:
    put:
      summary: Update an api linked to a product
      tags:
        - Api
      parameters:
        - $ref: '#/components/parameters/productId'
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/models/Api/schema'
              example:
                $ref: '#/components/models/Api/examples/single'
      responses:
        '200':
          $ref: '#/components/models/Api/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /profile:
    get:
      summary: Retrieve all profiles
      tags:
        - Profile
      responses:
        '200':
          description: Profiles data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Response message.
                  count:
                    type: integer
                    description: Total count of profiles.
                  limit:
                    type: integer
                    description: Limit on the number of profiles retrieved.
                  offset:
                    type: integer
                    description: Offset for the profiles retrieved.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The profile ID.
                        time_zone:
                          type: string
                          description: Time zone of the profile.
                        locale:
                          type: string
                          description: Locale of the profile.
                        userId:
                          type: integer
                          description: The associated user ID.
                        createdAt:
                          type: string
                          format: date-time
                          description: Profile creation date and time.
                        updatedAt:
                          type: string
                          format: date-time
                          description: Profile last update date and time.
              example:
                message: Ok
                count: 1
                limit: 99
                offset: 0
                data:
                  - id: 1
                    time_zone: America/Mexico_City
                    locale: es
                    userId: 1
                    createdAt: '2023-10-11T20:42:11.424Z'
                    updatedAt: '2023-10-11T20:42:11.424Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /profiles/{id}:
    get:
      summary: Retrieve a profile by ID
      tags:
        - Profile
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the profile to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Profile data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Response message.
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The profile ID.
                      time_zone:
                        type: string
                        description: Time zone of the profile.
                      locale:
                        type: string
                        description: Locale of the profile.
                      userId:
                        type: integer
                        description: The associated user ID.
                      createdAt:
                        type: string
                        format: date-time
                        description: Profile creation date and time.
                      updatedAt:
                        type: string
                        format: date-time
                        description: Profile last update date and time.
              example:
                message: Ok
                data:
                  id: 1
                  time_zone: America/Mexico_City
                  locale: es
                  userId: 1
                  createdAt: '2023-10-11T20:42:11.424Z'
                  updatedAt: '2023-10-11T20:42:11.424Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update a profile by ID
      tags:
        - Profile
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the profile to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                time_zone:
                  type: string
                  maxLength: 255
                  nullable: true
                  description: Time zone of the profile. Can be null.
                locale:
                  type: string
                  enum:
                    - en
                    - es
                  nullable: true
                  description: >-
                    Locale of the profile. Can be "en" or "es". Can also be
                    null.
            example:
              time_zone: America/Mexico_City
              locale: es
      responses:
        '200':
          description: Profile data updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Response message.
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The profile ID.
                      time_zone:
                        type: string
                        description: Time zone of the profile.
                      locale:
                        type: string
                        description: Locale of the profile.
                      userId:
                        type: integer
                        description: The associated user ID.
                      createdAt:
                        type: string
                        format: date-time
                        description: Profile creation date and time.
                      updatedAt:
                        type: string
                        format: date-time
                        description: Profile last update date and time.
              example:
                message: Ok
                data:
                  id: 1
                  time_zone: America/Mexico_City
                  locale: es
                  userId: 1
                  createdAt: '2023-10-11T20:42:11.424Z'
                  updatedAt: '2023-10-11T20:42:11.424Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /project:
    get:
      summary: Retrieve all projects
      tags:
        - Project
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/models/Project/responses/list'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /project/{id}:
    get:
      summary: Retrieve an individual project by id
      tags:
        - Project
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ok
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      name:
                        type: string
                        example: Test Project 01
                      description:
                        type: string
                        example: Test description
                      justification:
                        type: string
                        example: Test justification
                      businessSponsorEmail:
                        type: string
                        example: user@example.com
                      operationsEmail:
                        type: string
                        example: user@example.com
                      projectManagerEmail:
                        type: string
                        example: user@example.com
                      sitDate:
                        type: string
                        example: '2023-11-30T00:00:00.000Z'
                      uatDate:
                        type: string
                        example: '2023-11-30T00:00:00.000Z'
                      prodDate:
                        type: string
                        example: '2023-11-30T00:00:00.000Z'
                      status:
                        type: string
                        example: registered
                      productIds:
                        type: array
                        items:
                          type: integer
                        example: []
                      teamsIds:
                        type: array
                        items:
                          type: integer
                        example: []
                      teams:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: Team name
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: Product name
                            description:
                              type: string
                              example: Something
                            status:
                              type: string
                              example: registered
                      createdAt:
                        type: string
                        example: '2023-12-06T12:00:00.000Z'
                      updatedAt:
                        type: string
                        example: '2023-12-06T13:00:00.000Z'
                      openedAt:
                        type: string
                        example: '2023-12-06T14:00:00.000Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Partially modify a project by id
      tags:
        - Project
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/models/Project/schema'
              example:
                $ref: '#/components/models/Project/examples/single'
      responses:
        '200':
          $ref: '#/components/models/Project/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a project by id
      tags:
        - Project
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /project/{projectId}/product:
    get:
      summary: Retrieve all products from a project
      tags:
        - Product
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        '200':
          $ref: '#/components/models/Product/responses/list'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a product linked to a project
      tags:
        - Product
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/models/Product/schema'
              example:
                $ref: '#/components/models/Product/examples/single'
      responses:
        '200':
          $ref: '#/components/models/Product/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /project/{projectId}/product/{id}:
    put:
      summary: Update a product linked to a project
      tags:
        - Product
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/models/Product/schema'
              example:
                $ref: '#/components/models/Product/examples/single'
      responses:
        '200':
          $ref: '#/components/models/Product/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /team:
    get:
      summary: Retrieve all teams
      tags:
        - Team
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          $ref: '#/components/models/Team/responses/list'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a team
      tags:
        - Team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/models/Team/schema/create'
              example:
                $ref: '#/components/models/Team/examples/create'
      responses:
        '200':
          $ref: '#/components/models/Team/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /team/{id}:
    get:
      summary: Retrieve information from the team
      tags:
        - Team
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ok
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: Sample Team 1
                      projectIds:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 2
                            name:
                              type: string
                              example: Test Project 01
                            status:
                              type: string
                              example: registered
                      members:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: EnriqueTest
                            email:
                              type: string
                              example: admin@mail.com
                            role:
                              type: string
                              example: teamOwner
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Partially modify a team by id, including adding members by ids
      description: >-
        If a member not present in team is sent, it will be added to the team
        sent role. <br> If a member already present in team is sent, the role is
        compared with their present one and updated accordingly.
      tags:
        - Team
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/models/Team/schema/create'
              example:
                $ref: '#/components/models/Team/examples/create'
      responses:
        '200':
          $ref: '#/components/models/Project/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update a team linked to a project
      tags:
        - Team
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/models/Team/schema/create'
              example:
                $ref: '#/components/models/Team/examples/create'
      responses:
        '200':
          $ref: '#/components/models/Team/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a team by id
      tags:
        - Team
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /team/{teamId}/project:
    get:
      summary: Retrieve all projects from a team
      tags:
        - Project
      parameters:
        - $ref: '#/components/parameters/teamId'
      responses:
        '200':
          $ref: '#/components/models/Project/responses/list'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a project linked to a team
      tags:
        - Project
      parameters:
        - $ref: '#/components/parameters/teamId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/models/Project/schema'
              example:
                $ref: '#/components/models/Project/examples/single'
      responses:
        '200':
          $ref: '#/components/models/Project/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /team/{teamId}/project/{id}:
    put:
      summary: Update a project linked to a team
      tags:
        - Project
      parameters:
        - $ref: '#/components/parameters/teamId'
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/models/Project/schema'
              example:
                $ref: '#/components/models/Project/examples/single'
      responses:
        '200':
          $ref: '#/components/models/Project/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /team/{teamId}/members/delete:
    post:
      summary: Remove members linked to a team
      tags:
        - Team
      parameters:
        - $ref: '#/components/parameters/teamId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/models/Team/schema/removeMember'
              example:
                $ref: '#/components/models/Team/examples/removeMember'
      responses:
        '200':
          $ref: '#/components/models/Project/responses/single'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /user/self/entities:
    get:
      tags:
        - User
      summary: Get information of the logged-in user
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Ok
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      teams:
                        type: array
                        items:
                          $ref: '#/components/schemas/Team'
                      projects:
                        type: array
                        items:
                          $ref: '#/components/schemas/Project'
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
                      apis:
                        type: array
                        items:
                          $ref: '#/components/schemas/Api'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /user/{id}:
    get:
      summary: Retrieve a user by ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the user to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Response message.
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The user ID.
                      name:
                        type: string
                        description: The user name.
                      email:
                        type: string
                        description: The user email.
              example:
                message: Ok
                data:
                  id: 2
                  name: null
                  email: encodari@gmail.com
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update a user by ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The user name.
                email:
                  type: string
                  description: The user email.
                password:
                  type: string
                  description: The user password.
                role:
                  type: string
                  description: The user role.
            example:
              name: exampleUser
              email: email@mail.com
              password: password
              role: user
      responses:
        '200':
          description: User data updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
              example:
                message: Ok
                data:
                  id: 2
                  name: null
                  email: encodari2@gmail.com
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a user by ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          description: Numeric ID of the user to delete
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /user:
    get:
      summary: Retrieve a list of users in the platform
      tags:
        - User
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Response message.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The user ID.
                        name:
                          type: string
                          description: The user name.
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
tags:
  - name: File
    description: Uploaded file information and Upload endpoint
  - name: Microsoft Auth
    description: Microsoft SSO Service
